"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MODLLexer = void 0;
const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
const Lexer_1 = require("antlr4ts/Lexer");
const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
const Utils = __importStar(require("antlr4ts/misc/Utils"));
class MODLLexer extends Lexer_1.Lexer {
    constructor(input) {
        super(input);
        this._interp = new LexerATNSimulator_1.LexerATNSimulator(MODLLexer._ATN, this);
    }
    get vocabulary() {
        return MODLLexer.VOCABULARY;
    }
    get grammarFileName() {
        return 'MODLLexer.g4';
    }
    get ruleNames() {
        return MODLLexer.ruleNames;
    }
    get serializedATN() {
        return MODLLexer._serializedATN;
    }
    get channelNames() {
        return MODLLexer.channelNames;
    }
    get modeNames() {
        return MODLLexer.modeNames;
    }
    static get _ATN() {
        if (!MODLLexer.__ATN) {
            MODLLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(MODLLexer._serializedATN));
        }
        return MODLLexer.__ATN;
    }
}
exports.MODLLexer = MODLLexer;
MODLLexer.WS = 1;
MODLLexer.NULL = 2;
MODLLexer.TRUE = 3;
MODLLexer.FALSE = 4;
MODLLexer.EQUALS = 5;
MODLLexer.STRUCT_SEP = 6;
MODLLexer.ARR_SEP = 7;
MODLLexer.LBRAC = 8;
MODLLexer.RBRAC = 9;
MODLLexer.LSBRAC = 10;
MODLLexer.RSBRAC = 11;
MODLLexer.NUMBER = 12;
MODLLexer.QUOTED = 13;
MODLLexer.STRING = 14;
MODLLexer.channelNames = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];
MODLLexer.modeNames = ['DEFAULT_MODE'];
MODLLexer.ruleNames = [
    'WS',
    'NULL',
    'TRUE',
    'FALSE',
    'EQUALS',
    'STRUCT_SEP',
    'ARR_SEP',
    'LBRAC',
    'RBRAC',
    'LSBRAC',
    'RSBRAC',
    'NUMBER',
    'INT',
    'EXP',
    'QUOTED',
    'INSIDE_QUOTES',
    'INSIDE_GRAVES',
    'STRING',
    'UNRESERVED',
    'RESERVED_CHARS',
    'ESCAPED',
];
MODLLexer._LITERAL_NAMES = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'='",
    "';'",
    "','",
    "'('",
    "')'",
    "'['",
    "']'",
];
MODLLexer._SYMBOLIC_NAMES = [
    undefined,
    'WS',
    'NULL',
    'TRUE',
    'FALSE',
    'EQUALS',
    'STRUCT_SEP',
    'ARR_SEP',
    'LBRAC',
    'RBRAC',
    'LSBRAC',
    'RSBRAC',
    'NUMBER',
    'QUOTED',
    'STRING',
];
MODLLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(MODLLexer._LITERAL_NAMES, MODLLexer._SYMBOLIC_NAMES, []);
MODLLexer._serializedATN = '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x10\xC0\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x06' +
    '\x02/\n\x02\r\x02\x0E\x020\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03' +
    '\x03\x03\x03\x03\x03\x03\x03\x05\x03<\n\x03\x03\x04\x03\x04\x03\x04\x03' +
    '\x04\x03\x04\x03\x04\x05\x04D\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03' +
    '\x05\x03\x05\x03\x05\x05\x05M\n\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03' +
    '\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x05\r^' +
    '\n\r\x03\r\x03\r\x03\r\x06\rc\n\r\r\r\x0E\rd\x05\rg\n\r\x03\r\x05\rj\n' +
    '\r\x03\x0E\x03\x0E\x03\x0E\x07\x0Eo\n\x0E\f\x0E\x0E\x0Er\v\x0E\x05\x0E' +
    't\n\x0E\x03\x0F\x03\x0F\x05\x0Fx\n\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10' +
    '\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\x82\n\x10\f\x10\x0E\x10\x85\v' +
    '\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\x8C\n\x10\x03\x11' +
    '\x03\x11\x03\x12\x07\x12\x91\n\x12\f\x12\x0E\x12\x94\v\x12\x03\x13\x03' +
    '\x13\x05\x13\x98\n\x13\x03\x13\x03\x13\x06\x13\x9C\n\x13\r\x13\x0E\x13' +
    '\x9D\x03\x13\x06\x13\xA1\n\x13\r\x13\x0E\x13\xA2\x03\x13\x03\x13\x06\x13' +
    '\xA7\n\x13\r\x13\x0E\x13\xA8\x07\x13\xAB\n\x13\f\x13\x0E\x13\xAE\v\x13' +
    '\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x05\x16\xB6\n\x16\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\xBD\n\x16\x05\x16\xBF\n\x16' +
    '\x02\x02\x02\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07' +
    '\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E' +
    "\x1B\x02\x02\x1D\x02\x02\x1F\x02\x0F!\x02\x02#\x02\x02%\x02\x10'\x02" +
    '\x02)\x02\x02+\x02\x02\x03\x02\v\x05\x02\v\f\x0F\x0F""\x03\x022;\x03' +
    '\x023;\x04\x02GGgg\x04\x02--//\x03\x02$$\x03\x02bb\v\x02\n\f\x0E\x0F"' +
    '"$$*+==??]_\x80\x80\t\x0211^^ddhhppttvw\x02\xD2\x02\x03\x03\x02\x02\x02' +
    '\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02' +
    '\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02' +
    '\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02' +
    '\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02' +
    '%\x03\x02\x02\x02\x03.\x03\x02\x02\x02\x05;\x03\x02\x02\x02\x07C\x03\x02' +
    '\x02\x02\tL\x03\x02\x02\x02\vN\x03\x02\x02\x02\rP\x03\x02\x02\x02\x0F' +
    'R\x03\x02\x02\x02\x11T\x03\x02\x02\x02\x13V\x03\x02\x02\x02\x15X\x03\x02' +
    '\x02\x02\x17Z\x03\x02\x02\x02\x19]\x03\x02\x02\x02\x1Bs\x03\x02\x02\x02' +
    '\x1Du\x03\x02\x02\x02\x1F\x8B\x03\x02\x02\x02!\x8D\x03\x02\x02\x02#\x92' +
    "\x03\x02\x02\x02%\x97\x03\x02\x02\x02'\xAF\x03\x02\x02\x02)\xB1\x03\x02" +
    '\x02\x02+\xBE\x03\x02\x02\x02-/\t\x02\x02\x02.-\x03\x02\x02\x02/0\x03' +
    '\x02\x02\x020.\x03\x02\x02\x0201\x03\x02\x02\x0212\x03\x02\x02\x0223\b' +
    '\x02\x02\x023\x04\x03\x02\x02\x0245\x07p\x02\x0256\x07w\x02\x0267\x07' +
    'n\x02\x027<\x07n\x02\x0289\x072\x02\x029:\x072\x02\x02:<\x072\x02\x02' +
    ';4\x03\x02\x02\x02;8\x03\x02\x02\x02<\x06\x03\x02\x02\x02=>\x07v\x02\x02' +
    '>?\x07t\x02\x02?@\x07w\x02\x02@D\x07g\x02\x02AB\x072\x02\x02BD\x073\x02' +
    '\x02C=\x03\x02\x02\x02CA\x03\x02\x02\x02D\b\x03\x02\x02\x02EF\x07h\x02' +
    '\x02FG\x07c\x02\x02GH\x07n\x02\x02HI\x07u\x02\x02IM\x07g\x02\x02JK\x07' +
    '2\x02\x02KM\x072\x02\x02LE\x03\x02\x02\x02LJ\x03\x02\x02\x02M\n\x03\x02' +
    '\x02\x02NO\x07?\x02\x02O\f\x03\x02\x02\x02PQ\x07=\x02\x02Q\x0E\x03\x02' +
    '\x02\x02RS\x07.\x02\x02S\x10\x03\x02\x02\x02TU\x07*\x02\x02U\x12\x03\x02' +
    '\x02\x02VW\x07+\x02\x02W\x14\x03\x02\x02\x02XY\x07]\x02\x02Y\x16\x03\x02' +
    '\x02\x02Z[\x07_\x02\x02[\x18\x03\x02\x02\x02\\^\x07/\x02\x02]\\\x03\x02' +
    '\x02\x02]^\x03\x02\x02\x02^_\x03\x02\x02\x02_f\x05\x1B\x0E\x02`b\x070' +
    '\x02\x02ac\t\x03\x02\x02ba\x03\x02\x02\x02cd\x03\x02\x02\x02db\x03\x02' +
    '\x02\x02de\x03\x02\x02\x02eg\x03\x02\x02\x02f`\x03\x02\x02\x02fg\x03\x02' +
    '\x02\x02gi\x03\x02\x02\x02hj\x05\x1D\x0F\x02ih\x03\x02\x02\x02ij\x03\x02' +
    '\x02\x02j\x1A\x03\x02\x02\x02kt\x072\x02\x02lp\t\x04\x02\x02mo\t\x03\x02' +
    '\x02nm\x03\x02\x02\x02or\x03\x02\x02\x02pn\x03\x02\x02\x02pq\x03\x02\x02' +
    '\x02qt\x03\x02\x02\x02rp\x03\x02\x02\x02sk\x03\x02\x02\x02sl\x03\x02\x02' +
    '\x02t\x1C\x03\x02\x02\x02uw\t\x05\x02\x02vx\t\x06\x02\x02wv\x03\x02\x02' +
    '\x02wx\x03\x02\x02\x02xy\x03\x02\x02\x02yz\x05\x1B\x0E\x02z\x1E\x03\x02' +
    '\x02\x02{\x83\x07$\x02\x02|\x82\x05!\x11\x02}~\x07\x80\x02\x02~\x82\x07' +
    '$\x02\x02\x7F\x80\x07^\x02\x02\x80\x82\x07$\x02\x02\x81|\x03\x02\x02\x02' +
    '\x81}\x03\x02\x02\x02\x81\x7F\x03\x02\x02\x02\x82\x85\x03\x02\x02\x02' +
    '\x83\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x86\x03\x02\x02\x02' +
    '\x85\x83\x03\x02\x02\x02\x86\x8C\x07$\x02\x02\x87\x88\x07b\x02\x02\x88' +
    '\x89\x05#\x12\x02\x89\x8A\x07b\x02\x02\x8A\x8C\x03\x02\x02\x02\x8B{\x03' +
    '\x02\x02\x02\x8B\x87\x03\x02\x02\x02\x8C \x03\x02\x02\x02\x8D\x8E\n\x07' +
    '\x02\x02\x8E"\x03\x02\x02\x02\x8F\x91\n\b\x02\x02\x90\x8F\x03\x02\x02' +
    '\x02\x91\x94\x03\x02\x02\x02\x92\x90\x03\x02\x02\x02\x92\x93\x03\x02\x02' +
    '\x02\x93$\x03\x02\x02\x02\x94\x92\x03\x02\x02\x02\x95\x96\x07%\x02\x02' +
    '\x96\x98\x07"\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02' +
    "\x98\x9B\x03\x02\x02\x02\x99\x9C\x05+\x16\x02\x9A\x9C\x05'\x14\x02\x9B" +
    '\x99\x03\x02\x02\x02\x9B\x9A\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D' +
    '\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\xAC\x03\x02\x02\x02\x9F' +
    '\xA1\x07"\x02\x02\xA0\x9F\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2' +
    '\xA0\x03\x02\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3\xA6\x03\x02\x02\x02\xA4' +
    "\xA7\x05+\x16\x02\xA5\xA7\x05'\x14\x02\xA6\xA4\x03\x02\x02\x02\xA6\xA5" +
    '\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA8\xA9' +
    '\x03\x02\x02\x02\xA9\xAB\x03\x02\x02\x02\xAA\xA0\x03\x02\x02\x02\xAB\xAE' +
    '\x03\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD&' +
    '\x03\x02\x02\x02\xAE\xAC\x03\x02\x02\x02\xAF\xB0\n\t\x02\x02\xB0(\x03' +
    '\x02\x02\x02\xB1\xB2\t\t\x02\x02\xB2*\x03\x02\x02\x02\xB3\xB5\x07^\x02' +
    '\x02\xB4\xB6\t\n\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6\xBF\x03\x02\x02\x02' +
    '\xB7\xB8\x07^\x02\x02\xB8\xBF\x05)\x15\x02\xB9\xBC\x07\x80\x02\x02\xBA' +
    '\xBD\x05)\x15\x02\xBB\xBD\x07w\x02\x02\xBC\xBA\x03\x02\x02\x02\xBC\xBB' +
    '\x03\x02\x02\x02\xBD\xBF\x03\x02\x02\x02\xBE\xB3\x03\x02\x02\x02\xBE\xB7' +
    '\x03\x02\x02\x02\xBE\xB9\x03\x02\x02\x02\xBF,\x03\x02\x02\x02\x1C\x02' +
    '0;CL]dfipsw\x81\x83\x8B\x92\x97\x9B\x9D\xA2\xA6\xA8\xAC\xB5\xBC\xBE\x03' +
    '\b\x02\x02';
//# sourceMappingURL=MODLLexer.js.map